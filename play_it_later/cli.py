# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_cli.ipynb (unless otherwise specified).

__all__ = ['encrypt_game', 'decrypt_game']

# Cell
from fastcore.all import *
from pathlib import Path
from functools import partial
from shutil import copyfile
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.remote.webdriver import WebDriver as RemoteWebDriver
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.chrome.options import Options
from cryptography.fernet import Fernet
from selenium.webdriver.common.keys import Keys
from itertools import count
from time import sleep
import http
import webbrowser
import shutil
import os
import click
import colorama
import pickle
import json

from .encryption import *
from .talker import *

# Cell
@call_parse
def encrypt_game(p:Param('The path to the game save.',Path),
                 year:Param('year to decrypt',int),month:Param('month to decrypt',int),
                 day:Param('day to decrypt',int),hour:Param('hour to decrypt',int),minute:Param('minute to decrypt',int),
                 block_sz:Param('The block size to encrypt the file. Should be multiples of 8',int)=65536,
                 verbose:Param('print debug print statements. Will show the original key.',bool_arg)=False):
    key=Fernet.generate_key()
    if verbose:print(key)
    if str(p)[0]!='/': Path(os.getcwd())/p
    process_dirs(p,partial(encrypt_file,key=key,block_sz=block_sz,verbose=verbose))
    key=send_encryption_key(key,year,month,day,hour,minute)
    txt2encrypted_file(p.parent/'encrypted'/p.parts[-1],key)

# Cell
@call_parse
def decrypt_game(p:Param('The path to the game save.',Path),
                 prefix:Param('Where to put the decrypted file.',str),
                 verbose:Param('print debug print statements. Will show the original key.',bool_arg)=False,
                 mv_original_dir:Param('Move to the original directory.',bool_arg)=False):
    if str(p)[0]!='/': Path(os.getcwd())/p
    en_p=p if 'encrypted' in p.parts else p.parent/'encrypted'/p.parts[-1]
    key=encrypted_file2txt(en_p)
    key,result_description=request_decryption_key(key)
    if verbose:print(key)
    print(result_description)
    if key=='':
        print('key is empty. This is likely due to it being locked.')
        return
    process_dirs(en_p,partial(decrypt_file,key=key,verbose=verbose,prefix=prefix))

    if mv_original_dir: shutil.move(str(prefix/en_p),p)