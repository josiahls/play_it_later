# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_talker.ipynb (unless otherwise specified).

__all__ = ['txt2encrypted_file', 'encrypted_file2txt', 'HttpConnectionFailure', 'send_encryption_key',
           'request_decryption_key']

# Cell
from fastcore.all import *
from bs4 import BeautifulSoup
from pathlib import Path
from functools import partial
from shutil import copyfile
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.remote.webdriver import WebDriver as RemoteWebDriver
from selenium.webdriver.support import expected_conditions as EC

from selenium.webdriver.common.by import By

from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.chrome.options import Options
import shutil
from selenium.webdriver.common.keys import Keys
from itertools import count
from time import sleep
import http
import webbrowser
import flask
import os
import click
import pyperclip
import colorama
import pickle
import json

# Cell
def txt2encrypted_file(p:Path,txt:str):
    p=Path(p)/'encrypted_time_key.pkl'
    with open(p,'wb') as f:
        pickle.dump(txt.replace('\n',''),f)

# Cell
def encrypted_file2txt(p:Path):
    if len(Path(p).parts)==0 or Path(p).parts[-1]!='encrypted_time_key.pkl':
        p=Path(p)/'encrypted_time_key.pkl'
    with open(p,'rb') as f:
        shutil.move(str(p),'.')
        return pickle.load(f)

# Cell
class HttpConnectionFailure(Exception):pass

def send_encryption_key(key,year=2020,month=12,day=10,hour=19,minute=30,max_tries=10):
    chrome_options=Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')

    with webdriver.Chrome(ChromeDriverManager().install(),options=chrome_options) as driver:
        driver.get("http://www.tellyoulater.com")

        textbox=driver.find_element_by_id('intext')
        textbox.send_keys(key.decode('utf-8') if type(key)==bytes else key)

        button=driver.find_element_by_id('timeAM' if hour<12 else 'timePM')
        button.click()

        years_list=driver.find_element_by_id('yearShortcuts')
        years=[o.get_attribute('innerHTML') for o in years_list.find_elements_by_tag_name('a')]
        if str(year) not in years: click.echo(f'Please pick from these years: {years}')
        [o.click() for o in years_list.find_elements_by_tag_name('a') if o.get_attribute('innerHTML')==str(year)]

        if hour>12:hour-=12
        hours_list=driver.find_element_by_id('hours').find_elements_by_tag_name('a')
        hours=[int(o.get_attribute('innerHTML')[:-1]) for o in hours_list]
        if hour not in hours:click.echo(f'Please pick from these hours: {hours}')
        [o.click() for o in hours_list if int(o.get_attribute('innerHTML')[:-1])==hour]

        minutes_list=driver.find_element_by_id('minutes').find_elements_by_tag_name('a')
        minutes=[int(o.get_attribute('innerHTML')[1:]) for o in minutes_list]
        if minute not in minutes:click.echo(f'Please pick from these minutes: {minutes}')
        [o.click() for o in minutes_list if int(o.get_attribute('innerHTML')[1:])==minute]

        months_list=driver.find_element_by_id('monthShortcuts')
        months=[(i+1) for i,o in enumerate(months_list.find_elements_by_tag_name('a'))]
        if month not in months:
            click.echo(f'Please pick from these months: {month}')
        [o.click() for i,o in enumerate(months_list.find_elements_by_tag_name('a')) if (i+1)==month]

        date_picker=driver.find_element_by_id('datepicker')
        day_list=date_picker.find_element_by_tag_name('tbody').find_elements_by_tag_name('td')
        valid_day_list=[o.find_element_by_tag_name('a') for o in day_list if not in_('ui-state-disabled',o.get_attribute('class'))]
        days,day_elements=zip(*[(int(o.get_attribute('innerHTML')),o) for o in valid_day_list])
        if day not in days: click.echo(f'Please pick from these days in month {month}: {days}')
        [o.click() for i,o in zip(days,day_elements) if i==day]

        driver.find_element_by_id('encryptBtn').click()

        for i in count(0):
            res_code_element=driver.find_element_by_id('resCode').get_attribute('innerHTML').replace('\n','')
            if res_code_element=='':sleep(1)
            else:break
            if i==max_tries: raise HttpConnectionFailure('Failed to get res code')

        return res_code_element

# Cell
def request_decryption_key(key,max_tries=10):
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')

    with webdriver.Chrome(ChromeDriverManager().install(),options=chrome_options) as driver:
        driver.get("http://www.tellyoulater.com/decrypt")

        textbox=driver.find_element_by_id('outtext')
        textbox.clear()
        textbox.send_keys(key)

        button=driver.find_element_by_id('decryptBtn')
        button.click()

        result_description=driver.find_element_by_id('msgDescription')
        click.echo(result_description.get_attribute('innerHTML'))

        for i in count(0):
            decrypted_msg=driver.find_element_by_id('decryptedMsg')\
                                     .get_attribute('innerHTML')\
                                     .replace('"','').replace('”','')\
                                     .replace('“','').replace('<br>','')
            if decrypted_msg=='':sleep(1)
            else:break
            if i==max_tries: raise HttpConnectionFailure('Failed to get decrypted_msg')
        return decrypted_msg,result_description
